library fclone;

import 'dart:convert';
import 'dart:io';

import 'package:archive/archive_io.dart';
import 'package:args/args.dart';
import 'package:flutter_native_splash/cli_commands.dart';
import 'package:icons_launcher/cli_commands.dart';
import 'package:json2yaml/json2yaml.dart';
import 'package:package_rename/package_rename.dart' as package_rename;
import 'package:yaml/yaml.dart';

/// A Calculator.
class FClone {
  String? path;
  static FClone? _instance;

  FClone._internal();

  static FClone get instance => _getInstance();

  static FClone _getInstance() {
    _instance ??= FClone._internal();
    return _instance!;
  }

  List<String> impFiles = [
    'flutter_native_splash.json',
    'icons_launcher.json',
    'package_rename_config.json',
  ];

  void exec(List<String> arguments) {
    loadKeys(arguments);
  }

  Future<void> loadKeys(List<String> arguments) async {
    if (arguments.isEmpty) {
      final parsedArgs = loadConfigFile();
      path = parsedArgs['path'];
    } else {
      final parser = ArgParser();
      parser.addOption('path');
      final parsedArgs = parser.parse(arguments);
      path = parsedArgs['path'];
    }
    if (path == null) {
      flog(
          'error path not found please specify path where you store your zip file');
    } else {
      if (Uri.parse(path!).isAbsolute) {
        flog('path is a url will download zip...');
      } else {
        File file = File(path!);
        if (!await file.exists()) {
          flog('error path not found $path');
        } else {
          generateFiles(file);
        }
      }
    }
  }

  Map<String, String> loadConfigFile() {
    final File file = File('pubspec.yaml');
    final String yamlString = file.readAsStringSync();
    final Map yamlMap = loadYaml(yamlString);

    if (yamlMap['fclone'] is! Map) {
      throw Exception('fclone was not found');
    }
    final Map<String, String> config = <String, String>{};
    for (MapEntry<dynamic, dynamic> entry in yamlMap['fclone'].entries) {
      config[entry.key] = entry.value.toString();
    }

    return config;
  }

  flog(String s) {
    print('FCLONE :: $s');
  }

  Future<void> generateFiles(File file) async {
    Directory directory = Directory('fclone');
    try {
      final inputStream = InputFileStream(file.path);
      final archive = ZipDecoder().decodeBuffer(inputStream);
      extractArchiveToDisk(archive, 'fclone');
    } catch (e) {
      flog('$e');
    }
    await Future.forEach(impFiles, (element) async {
      File incoming = File('${directory.path}/$element');
      File outGoing = File(element.toString().replaceAll('.json', '.yaml'));
      if (await incoming.exists()) {
        if (await outGoing.exists()) {
          await outGoing.delete();
        }
        String data = json2yaml(jsonDecode(await incoming.readAsString()));
        await outGoing.writeAsString(
          '# Generated By Bikramaditya From Fclone\n$data',
        );
      }
    });
    package_rename.set([]);
    createSplash(
      path: 'flutter_native_splash.yaml',
      flavor: null,
    );
    createLauncherIcons(path: 'icon_launcher.yaml', flavor: null);
  }
}
